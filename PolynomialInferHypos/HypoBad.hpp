// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace HypoBad_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/home/meysam/WorkLinux/PolynomialModelComparision/PolynomialInferHypos/HypoBad.stan");
    reader.add_event(43, 43, "end", "/home/meysam/WorkLinux/PolynomialModelComparision/PolynomialInferHypos/HypoBad.stan");
    return reader;
}

class HypoBad_model : public prob_grad {
private:
    int nt;
    double sd_value;
    vector<double> t;
    vector<double> yobs;
public:
    HypoBad_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    HypoBad_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "HypoBad_model_namespace::HypoBad_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "sd_value", "double", context__.to_vec());
            sd_value = double(0);
            vals_r__ = context__.vals_r("sd_value");
            pos__ = 0;
            sd_value = vals_r__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("t", "nt", nt);
            context__.validate_dims("data initialization", "t", "double", context__.to_vec(nt));
            validate_non_negative_index("t", "nt", nt);
            t = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < t_limit_0__; ++i_0__) {
                t[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("yobs", "nt", nt);
            context__.validate_dims("data initialization", "yobs", "double", context__.to_vec(nt));
            validate_non_negative_index("yobs", "nt", nt);
            yobs = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("yobs");
            pos__ = 0;
            size_t yobs_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < yobs_limit_0__; ++i_0__) {
                yobs[i_0__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 9;
            ++num_params_r__;
            current_statement_begin__ = 10;
            ++num_params_r__;
            current_statement_begin__ = 11;
            ++num_params_r__;
            current_statement_begin__ = 12;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~HypoBad_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("p2")))
            throw std::runtime_error("variable p2 missing");
        vals_r__ = context__.vals_r("p2");
        pos__ = 0U;
        context__.validate_dims("initialization", "p2", "double", context__.to_vec());
        double p2(0);
        p2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(p2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable p2: ") + e.what());
        }

        if (!(context__.contains_r("p1")))
            throw std::runtime_error("variable p1 missing");
        vals_r__ = context__.vals_r("p1");
        pos__ = 0U;
        context__.validate_dims("initialization", "p1", "double", context__.to_vec());
        double p1(0);
        p1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(p1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable p1: ") + e.what());
        }

        if (!(context__.contains_r("p0")))
            throw std::runtime_error("variable p0 missing");
        vals_r__ = context__.vals_r("p0");
        pos__ = 0U;
        context__.validate_dims("initialization", "p0", "double", context__.to_vec());
        double p0(0);
        p0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(p0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable p0: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ p2;
            (void) p2;  // dummy to suppress unused var warning
            if (jacobian__)
                p2 = in__.scalar_constrain(lp__);
            else
                p2 = in__.scalar_constrain();

            local_scalar_t__ p1;
            (void) p1;  // dummy to suppress unused var warning
            if (jacobian__)
                p1 = in__.scalar_constrain(lp__);
            else
                p1 = in__.scalar_constrain();

            local_scalar_t__ p0;
            (void) p0;  // dummy to suppress unused var warning
            if (jacobian__)
                p0 = in__.scalar_constrain(lp__);
            else
                p0 = in__.scalar_constrain();

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 17;
            validate_non_negative_index("y", "nt", nt);
            vector<local_scalar_t__> y(nt);
            stan::math::initialize(y, DUMMY_VAR__);
            stan::math::fill(y,DUMMY_VAR__);
            current_statement_begin__ = 19;
            local_scalar_t__ mu_value;
            (void) mu_value;  // dummy to suppress unused var warning

            stan::math::initialize(mu_value, DUMMY_VAR__);
            stan::math::fill(mu_value,DUMMY_VAR__);


            current_statement_begin__ = 20;
            stan::math::assign(mu_value, -(15));
            current_statement_begin__ = 22;
            lp_accum__.add(normal_log<propto__>(p2, mu_value, sd_value));
            current_statement_begin__ = 23;
            lp_accum__.add(normal_log<propto__>(p1, mu_value, sd_value));
            current_statement_begin__ = 24;
            lp_accum__.add(normal_log<propto__>(p0, mu_value, sd_value));
            current_statement_begin__ = 26;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 27;
                stan::math::assign(get_base1_lhs(y,i,"y",1), (((p2 * pow(get_base1(t,i,"t",1),2)) + (p1 * pow(get_base1(t,i,"t",1),1))) + (p0 * pow(get_base1(t,i,"t",1),0))));
            }
            current_statement_begin__ = 30;
            lp_accum__.add(normal_log<propto__>(yobs, y, sigma));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("p2");
        names__.push_back("p1");
        names__.push_back("p0");
        names__.push_back("sigma");
        names__.push_back("log_lik");
        names__.push_back("y");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "HypoBad_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double p2 = in__.scalar_constrain();
        double p1 = in__.scalar_constrain();
        double p0 = in__.scalar_constrain();
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(p2);
        vars__.push_back(p1);
        vars__.push_back(p0);
        vars__.push_back(sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 34;
            validate_non_negative_index("log_lik", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_lik(static_cast<Eigen::VectorXd::Index>(nt));
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("y", "nt", nt);
            vector<local_scalar_t__> y(nt);
            stan::math::initialize(y, DUMMY_VAR__);
            stan::math::fill(y,DUMMY_VAR__);


            current_statement_begin__ = 37;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 38;
                stan::math::assign(get_base1_lhs(y,i,"y",1), (((p2 * pow(get_base1(t,i,"t",1),2)) + (p1 * pow(get_base1(t,i,"t",1),1))) + (p0 * pow(get_base1(t,i,"t",1),0))));
            }
            current_statement_begin__ = 40;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 41;
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), normal_log(get_base1(yobs,i,"yobs",1),get_base1(y,i,"y",1),sigma));
            }

            // validate generated quantities
            current_statement_begin__ = 34;
            current_statement_begin__ = 35;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(y[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "HypoBad_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "p2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "p2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef HypoBad_model_namespace::HypoBad_model stan_model;

